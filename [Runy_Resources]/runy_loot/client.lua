screen = {guiGetScreenSize ()}
resolution = {1366, 768}
sx, sy = screen[1] / resolution[1], screen[2] / resolution[2]

function setScreenPosition (x, y, w, h)
    return ((x / resolution[1]) * screen[1]), ((y / resolution[2]) * screen[2]), ((w / resolution[1]) * screen[1]), ((h / resolution[2]) * screen[2])
end

addEvent("colletItemByFN", true)
addEventHandler("colletItemByFN", resourceRoot, function(audioPath)
    playSound(audioPath)
end)

function isCursorOnElement (x, y, w, h)
    if isCursorShowing () then
        local cursor = {getCursorPosition ()}
        local mx, my = cursor[1] * screen[1], cursor[2] * screen[2]
        return mx > x and mx < x + w and my > y and my < y + h
    end
    return false
end

_dxDrawRectangle = dxDrawRectangle
function dxDrawRectangle (x, y, w, h, ...)
    local x, y, w, h = setScreenPosition (x, y, w, h)
    
    return _dxDrawRectangle (x, y, w, h, ...)
end

_dxDrawImage = dxDrawImage
function dxDrawImage (x, y, w, h, ...)
    local x, y, w, h = setScreenPosition (x, y, w, h)
    
    return _dxDrawImage (x, y, w, h, ...)
end

_dxDrawImageSection = dxDrawImageSection
function dxDrawImageSection (x, y, w, h, ...)
    local x, y, w, h = setScreenPosition (x, y, w, h)
    
    return _dxDrawImageSection (x, y, w, h, ...)
end

_dxDrawText = dxDrawText
function dxDrawText (text, x, y, w, h, ...)
    local x, y, w, h = setScreenPosition (x, y, w, h)
    
    return _dxDrawText (text, x, y, (x + w), (y + h), ...)
end

_isCursorOnElement = isCursorOnElement
function isCursorOnElement (x, y, w, h)
    local x, y, w, h = setScreenPosition (x, y, w, h)
    
    return _isCursorOnElement (x, y, w, h)
end


screenScale = math.min(math.max(0.80, sy / resolution[2]), 2)

function gettamanhosize(size)
    size = (size < 13) and size + 3 or size
    local newSize = size * (72 / 96)
    return newSize
end

textures = {
    font = {}
    
}

_dxCreateFont = dxCreateFont

function dxCreateFont (path, size, ...)
    
    if not textures.font[path] then
        textures.font[path] = {}
    end
    
    if not textures.font[path][size] then
        textures.font[path][size] = _dxCreateFont(
        path,
        (gettamanhosize(size) * screenScale),
        ...
    )
end

return textures.font[path][size]
end

_svgCreate = svgCreate
function svgCreate (w, h, ...)
    return _svgCreate(w * 2, h * 2, ...)
end

svg = {
    background = _svgCreate(156, 43, [[<svg width="156" height="43" viewBox="0 0 156 43" fill="none" xmlns="http://www.w3.org/2000/svg">
    <rect x="0.5" y="0.5" width="155" height="42" rx="2.5" fill="#010101" fill-opacity="0.45" stroke="#2F3032"/>
    <rect x="12" y="11" width="22" height="21" rx="2" fill="#010101" fill-opacity="0.45"/>
    <path d="M25.9619 23.6465V25H21.7993V23.6465H25.9619ZM22.3955 17.1797V25H20.6445V17.1797H22.3955ZM25.4248 20.3271V21.6377H21.7993V20.3271H25.4248ZM25.9673 17.1797V18.5386H21.7993V17.1797H25.9673Z" fill="white"/>
    <path d="M45.1406 17.2227V18H42.2852V17.2227H45.1406ZM42.5586 12.3125V18H41.5781V12.3125H42.5586ZM50.1758 15V15.3125C50.1758 15.7422 50.1198 16.1276 50.0078 16.4688C49.8958 16.8099 49.7357 17.1003 49.5273 17.3398C49.3216 17.5794 49.0742 17.763 48.7852 17.8906C48.4961 18.0156 48.1758 18.0781 47.8242 18.0781C47.4753 18.0781 47.1562 18.0156 46.8672 17.8906C46.5807 17.763 46.332 17.5794 46.1211 17.3398C45.9102 17.1003 45.7461 16.8099 45.6289 16.4688C45.5143 16.1276 45.457 15.7422 45.457 15.3125V15C45.457 14.5703 45.5143 14.1862 45.6289 13.8477C45.7435 13.5065 45.9049 13.2161 46.1133 12.9766C46.3242 12.7344 46.5729 12.5508 46.8594 12.4258C47.1484 12.2982 47.4674 12.2344 47.8164 12.2344C48.168 12.2344 48.4883 12.2982 48.7773 12.4258C49.0664 12.5508 49.3151 12.7344 49.5234 12.9766C49.7318 13.2161 49.8919 13.5065 50.0039 13.8477C50.1185 14.1862 50.1758 14.5703 50.1758 15ZM49.1953 15.3125V14.9922C49.1953 14.6745 49.1641 14.3945 49.1016 14.1523C49.0417 13.9076 48.9518 13.7031 48.832 13.5391C48.7148 13.3724 48.5703 13.2474 48.3984 13.1641C48.2266 13.0781 48.0326 13.0352 47.8164 13.0352C47.6003 13.0352 47.4076 13.0781 47.2383 13.1641C47.069 13.2474 46.9245 13.3724 46.8047 13.5391C46.6875 13.7031 46.5977 13.9076 46.5352 14.1523C46.4727 14.3945 46.4414 14.6745 46.4414 14.9922V15.3125C46.4414 15.6302 46.4727 15.9115 46.5352 16.1562C46.5977 16.401 46.6888 16.6081 46.8086 16.7773C46.931 16.944 47.0768 17.0703 47.2461 17.1562C47.4154 17.2396 47.6081 17.2812 47.8242 17.2812C48.043 17.2812 48.237 17.2396 48.4062 17.1562C48.5755 17.0703 48.7188 16.944 48.8359 16.7773C48.9531 16.6081 49.0417 16.401 49.1016 16.1562C49.1641 15.9115 49.1953 15.6302 49.1953 15.3125ZM55.6914 15V15.3125C55.6914 15.7422 55.6354 16.1276 55.5234 16.4688C55.4115 16.8099 55.2513 17.1003 55.043 17.3398C54.8372 17.5794 54.5898 17.763 54.3008 17.8906C54.0117 18.0156 53.6914 18.0781 53.3398 18.0781C52.9909 18.0781 52.6719 18.0156 52.3828 17.8906C52.0964 17.763 51.8477 17.5794 51.6367 17.3398C51.4258 17.1003 51.2617 16.8099 51.1445 16.4688C51.0299 16.1276 50.9727 15.7422 50.9727 15.3125V15C50.9727 14.5703 51.0299 14.1862 51.1445 13.8477C51.2591 13.5065 51.4206 13.2161 51.6289 12.9766C51.8398 12.7344 52.0885 12.5508 52.375 12.4258C52.6641 12.2982 52.9831 12.2344 53.332 12.2344C53.6836 12.2344 54.0039 12.2982 54.293 12.4258C54.582 12.5508 54.8307 12.7344 55.0391 12.9766C55.2474 13.2161 55.4076 13.5065 55.5195 13.8477C55.6341 14.1862 55.6914 14.5703 55.6914 15ZM54.7109 15.3125V14.9922C54.7109 14.6745 54.6797 14.3945 54.6172 14.1523C54.5573 13.9076 54.4674 13.7031 54.3477 13.5391C54.2305 13.3724 54.0859 13.2474 53.9141 13.1641C53.7422 13.0781 53.5482 13.0352 53.332 13.0352C53.1159 13.0352 52.9232 13.0781 52.7539 13.1641C52.5846 13.2474 52.4401 13.3724 52.3203 13.5391C52.2031 13.7031 52.1133 13.9076 52.0508 14.1523C51.9883 14.3945 51.957 14.6745 51.957 14.9922V15.3125C51.957 15.6302 51.9883 15.9115 52.0508 16.1562C52.1133 16.401 52.2044 16.6081 52.3242 16.7773C52.4466 16.944 52.5924 17.0703 52.7617 17.1562C52.931 17.2396 53.1237 17.2812 53.3398 17.2812C53.5586 17.2812 53.7526 17.2396 53.9219 17.1562C54.0911 17.0703 54.2344 16.944 54.3516 16.7773C54.4688 16.6081 54.5573 16.401 54.6172 16.1562C54.6797 15.9115 54.7109 15.6302 54.7109 15.3125ZM58.8164 12.3125V18H57.8438V12.3125H58.8164ZM60.6016 12.3125V13.0938H56.0742V12.3125H60.6016Z" fill="white"/>
    <path d="M43.2249 28.2766H42.022V27.645H43.2249C43.4343 27.645 43.6036 27.6112 43.7327 27.5435C43.8617 27.4757 43.9559 27.3826 44.0151 27.2642C44.0765 27.1436 44.1072 27.006 44.1072 26.8516C44.1072 26.7056 44.0765 26.5691 44.0151 26.4421C43.9559 26.3131 43.8617 26.2094 43.7327 26.1311C43.6036 26.0528 43.4343 26.0137 43.2249 26.0137H42.2664V30H41.4697V25.3789H43.2249C43.5824 25.3789 43.8861 25.4424 44.1357 25.5693C44.3875 25.6942 44.579 25.8677 44.7102 26.0898C44.8414 26.3099 44.907 26.5617 44.907 26.8452C44.907 27.1436 44.8414 27.3996 44.7102 27.6133C44.579 27.827 44.3875 27.991 44.1357 28.1052C43.8861 28.2195 43.5824 28.2766 43.2249 28.2766ZM45.6211 25.3789H47.2556C47.6069 25.3789 47.9062 25.4318 48.1538 25.5376C48.4014 25.6434 48.5907 25.8 48.7219 26.0073C48.8552 26.2126 48.9219 26.4665 48.9219 26.769C48.9219 26.9997 48.8796 27.2028 48.7949 27.3784C48.7103 27.554 48.5907 27.7021 48.4363 27.8228C48.2818 27.9412 48.0977 28.0333 47.884 28.0989L47.6428 28.2163H46.1733L46.167 27.5847H47.2683C47.4587 27.5847 47.6174 27.5509 47.7444 27.4832C47.8713 27.4154 47.9666 27.3234 48.03 27.207C48.0956 27.0885 48.1284 26.9552 48.1284 26.8071C48.1284 26.6463 48.0967 26.5067 48.0332 26.3882C47.9718 26.2676 47.8766 26.1755 47.7476 26.1121C47.6185 26.0465 47.4545 26.0137 47.2556 26.0137H46.4177V30H45.6211V25.3789ZM48.2585 30L47.1731 27.9243L48.0078 27.9211L49.1091 29.9587V30H48.2585ZM52.74 29.3684V30H50.2866V29.3684H52.74ZM50.512 25.3789V30H49.7153V25.3789H50.512ZM52.4194 27.3086V27.9307H50.2866V27.3086H52.4194ZM52.7241 25.3789V26.0137H50.2866V25.3789H52.7241ZM55.8218 28.8098C55.8218 28.7146 55.807 28.63 55.7773 28.5559C55.7498 28.4819 55.7001 28.4141 55.6282 28.3528C55.5562 28.2914 55.4547 28.2322 55.3235 28.175C55.1944 28.1158 55.0294 28.0555 54.8284 27.9941C54.6083 27.9264 54.4052 27.8513 54.219 27.7688C54.0349 27.6842 53.8741 27.5868 53.7366 27.4768C53.599 27.3647 53.4922 27.2367 53.416 27.0928C53.3398 26.9468 53.3018 26.7786 53.3018 26.5881C53.3018 26.3998 53.3409 26.2284 53.4192 26.074C53.4996 25.9195 53.6128 25.7862 53.7588 25.6741C53.9069 25.5598 54.0815 25.472 54.2825 25.4106C54.4835 25.3472 54.7056 25.3154 54.949 25.3154C55.2917 25.3154 55.5869 25.3789 55.8345 25.5059C56.0841 25.6328 56.2756 25.8031 56.4089 26.0168C56.5444 26.2306 56.6121 26.4665 56.6121 26.7246H55.8218C55.8218 26.5723 55.789 26.4379 55.7234 26.3215C55.6599 26.203 55.5626 26.1099 55.4314 26.0422C55.3023 25.9745 55.1383 25.9407 54.9395 25.9407C54.7511 25.9407 54.5946 25.9692 54.4697 26.0264C54.3449 26.0835 54.2518 26.1607 54.1904 26.2581C54.1291 26.3554 54.0984 26.4654 54.0984 26.5881C54.0984 26.6749 54.1185 26.7542 54.1587 26.8262C54.1989 26.896 54.2603 26.9616 54.3428 27.0229C54.4253 27.0822 54.529 27.1383 54.6538 27.1912C54.7786 27.2441 54.9257 27.2948 55.095 27.3435C55.351 27.4197 55.5742 27.5043 55.7646 27.5974C55.9551 27.6884 56.1138 27.7921 56.2407 27.9084C56.3677 28.0248 56.4629 28.1571 56.5264 28.3052C56.5898 28.4512 56.6216 28.6173 56.6216 28.8035C56.6216 28.9981 56.5824 29.1737 56.5042 29.3303C56.4259 29.4848 56.3137 29.617 56.1677 29.7271C56.0238 29.835 55.8503 29.9185 55.6472 29.9778C55.4462 30.0349 55.2219 30.0635 54.9744 30.0635C54.7522 30.0635 54.5332 30.0339 54.3174 29.9746C54.1037 29.9154 53.909 29.8254 53.7334 29.7048C53.5578 29.5821 53.4181 29.4298 53.3145 29.2478C53.2108 29.0637 53.1589 28.849 53.1589 28.6035H53.9556C53.9556 28.7537 53.981 28.8818 54.0317 28.9875C54.0846 29.0933 54.1576 29.1801 54.2507 29.2478C54.3438 29.3134 54.4517 29.3621 54.5745 29.3938C54.6993 29.4255 54.8326 29.4414 54.9744 29.4414C55.1606 29.4414 55.3161 29.415 55.4409 29.3621C55.5679 29.3092 55.6631 29.2351 55.7266 29.1399C55.79 29.0447 55.8218 28.9347 55.8218 28.8098ZM59.7573 28.8098C59.7573 28.7146 59.7425 28.63 59.7129 28.5559C59.6854 28.4819 59.6357 28.4141 59.5637 28.3528C59.4918 28.2914 59.3902 28.2322 59.259 28.175C59.13 28.1158 58.9649 28.0555 58.7639 27.9941C58.5439 27.9264 58.3407 27.8513 58.1545 27.7688C57.9705 27.6842 57.8097 27.5868 57.6721 27.4768C57.5346 27.3647 57.4277 27.2367 57.3516 27.0928C57.2754 26.9468 57.2373 26.7786 57.2373 26.5881C57.2373 26.3998 57.2764 26.2284 57.3547 26.074C57.4351 25.9195 57.5483 25.7862 57.6943 25.6741C57.8424 25.5598 58.017 25.472 58.218 25.4106C58.419 25.3472 58.6412 25.3154 58.8845 25.3154C59.2273 25.3154 59.5225 25.3789 59.77 25.5059C60.0197 25.6328 60.2112 25.8031 60.3445 26.0168C60.4799 26.2306 60.5476 26.4665 60.5476 26.7246H59.7573C59.7573 26.5723 59.7245 26.4379 59.6589 26.3215C59.5955 26.203 59.4981 26.1099 59.3669 26.0422C59.2379 25.9745 59.0739 25.9407 58.875 25.9407C58.6867 25.9407 58.5301 25.9692 58.4053 26.0264C58.2804 26.0835 58.1873 26.1607 58.126 26.2581C58.0646 26.3554 58.0339 26.4654 58.0339 26.5881C58.0339 26.6749 58.054 26.7542 58.0942 26.8262C58.1344 26.896 58.1958 26.9616 58.2783 27.0229C58.3608 27.0822 58.4645 27.1383 58.5894 27.1912C58.7142 27.2441 58.8612 27.2948 59.0305 27.3435C59.2865 27.4197 59.5098 27.5043 59.7002 27.5974C59.8906 27.6884 60.0493 27.7921 60.1763 27.9084C60.3032 28.0248 60.3984 28.1571 60.4619 28.3052C60.5254 28.4512 60.5571 28.6173 60.5571 28.8035C60.5571 28.9981 60.518 29.1737 60.4397 29.3303C60.3614 29.4848 60.2493 29.617 60.1033 29.7271C59.9594 29.835 59.7859 29.9185 59.5828 29.9778C59.3818 30.0349 59.1575 30.0635 58.9099 30.0635C58.6877 30.0635 58.4688 30.0339 58.2529 29.9746C58.0392 29.9154 57.8446 29.8254 57.6689 29.7048C57.4933 29.5821 57.3537 29.4298 57.25 29.2478C57.1463 29.0637 57.0945 28.849 57.0945 28.6035H57.8911C57.8911 28.7537 57.9165 28.8818 57.9673 28.9875C58.0202 29.0933 58.0932 29.1801 58.1863 29.2478C58.2794 29.3134 58.3873 29.3621 58.51 29.3938C58.6348 29.4255 58.7681 29.4414 58.9099 29.4414C59.0961 29.4414 59.2516 29.415 59.3765 29.3621C59.5034 29.3092 59.5986 29.2351 59.6621 29.1399C59.7256 29.0447 59.7573 28.9347 59.7573 28.8098ZM62.1123 25.3789V30H61.3157V25.3789H62.1123ZM66.7874 27.5625V27.8164C66.7874 28.1655 66.7419 28.4787 66.6509 28.7559C66.5599 29.033 66.4298 29.269 66.2605 29.4636C66.0933 29.6583 65.8923 29.8075 65.6575 29.9111C65.4226 30.0127 65.1624 30.0635 64.8767 30.0635C64.5932 30.0635 64.334 30.0127 64.0991 29.9111C63.8664 29.8075 63.6643 29.6583 63.4929 29.4636C63.3215 29.269 63.1882 29.033 63.093 28.7559C62.9999 28.4787 62.9534 28.1655 62.9534 27.8164V27.5625C62.9534 27.2134 62.9999 26.9013 63.093 26.6262C63.1861 26.349 63.3173 26.1131 63.4866 25.9185C63.658 25.7217 63.86 25.5725 64.0928 25.4709C64.3276 25.3673 64.5868 25.3154 64.8704 25.3154C65.156 25.3154 65.4163 25.3673 65.6511 25.4709C65.886 25.5725 66.0881 25.7217 66.2573 25.9185C66.4266 26.1131 66.5567 26.349 66.6477 26.6262C66.7408 26.9013 66.7874 27.2134 66.7874 27.5625ZM65.9907 27.8164V27.5562C65.9907 27.298 65.9653 27.0706 65.9146 26.8738C65.8659 26.6749 65.7929 26.5088 65.6956 26.3755C65.6003 26.2401 65.4829 26.1385 65.3433 26.0708C65.2036 26.001 65.046 25.9661 64.8704 25.9661C64.6947 25.9661 64.5382 26.001 64.4006 26.0708C64.2631 26.1385 64.1457 26.2401 64.0483 26.3755C63.9531 26.5088 63.8801 26.6749 63.8293 26.8738C63.7786 27.0706 63.7532 27.298 63.7532 27.5562V27.8164C63.7532 28.0745 63.7786 28.3031 63.8293 28.502C63.8801 28.7008 63.9542 28.8691 64.0515 29.0066C64.151 29.142 64.2694 29.2446 64.407 29.3145C64.5445 29.3822 64.7011 29.416 64.8767 29.416C65.0544 29.416 65.2121 29.3822 65.3496 29.3145C65.4871 29.2446 65.6035 29.142 65.6987 29.0066C65.7939 28.8691 65.8659 28.7008 65.9146 28.502C65.9653 28.3031 65.9907 28.0745 65.9907 27.8164ZM71.2498 25.3789V30H70.4531L68.3806 26.6897V30H67.584V25.3789H68.3806L70.4595 28.6956V25.3789H71.2498ZM75.2234 29.3684V30H72.77V29.3684H75.2234ZM72.9954 25.3789V30H72.1987V25.3789H72.9954ZM74.9028 27.3086V27.9307H72.77V27.3086H74.9028ZM75.2075 25.3789V26.0137H72.77V25.3789H75.2075ZM80.5173 29.3684V30H78.064V29.3684H80.5173ZM78.2893 25.3789V30H77.4927V25.3789H78.2893ZM80.1968 27.3086V27.9307H78.064V27.3086H80.1968ZM80.5015 25.3789V26.0137H78.064V25.3789H80.5015ZM84.5417 28.2766H83.3389V27.645H84.5417C84.7512 27.645 84.9205 27.6112 85.0496 27.5435C85.1786 27.4757 85.2728 27.3826 85.332 27.2642C85.3934 27.1436 85.4241 27.006 85.4241 26.8516C85.4241 26.7056 85.3934 26.5691 85.332 26.4421C85.2728 26.3131 85.1786 26.2094 85.0496 26.1311C84.9205 26.0528 84.7512 26.0137 84.5417 26.0137H83.5833V30H82.7866V25.3789H84.5417C84.8993 25.3789 85.203 25.4424 85.4526 25.5693C85.7044 25.6942 85.8959 25.8677 86.0271 26.0898C86.1583 26.3099 86.2239 26.5617 86.2239 26.8452C86.2239 27.1436 86.1583 27.3996 86.0271 27.6133C85.8959 27.827 85.7044 27.991 85.4526 28.1052C85.203 28.2195 84.8993 28.2766 84.5417 28.2766ZM88.2551 25.9946L86.8745 30H86.0398L87.7791 25.3789H88.3123L88.2551 25.9946ZM89.4104 30L88.0266 25.9946L87.9663 25.3789H88.5027L90.2483 30H89.4104ZM89.3438 28.2861V28.9177H86.8301V28.2861H89.3438ZM90.7656 25.3789H92.4001C92.7514 25.3789 93.0508 25.4318 93.2983 25.5376C93.5459 25.6434 93.7353 25.8 93.8665 26.0073C93.9998 26.2126 94.0664 26.4665 94.0664 26.769C94.0664 26.9997 94.0241 27.2028 93.9395 27.3784C93.8548 27.554 93.7353 27.7021 93.5808 27.8228C93.4264 27.9412 93.2423 28.0333 93.0286 28.0989L92.7874 28.2163H91.3179L91.3115 27.5847H92.4128C92.6033 27.5847 92.762 27.5509 92.8889 27.4832C93.0159 27.4154 93.1111 27.3234 93.1746 27.207C93.2402 27.0885 93.2729 26.9552 93.2729 26.8071C93.2729 26.6463 93.2412 26.5067 93.1777 26.3882C93.1164 26.2676 93.0212 26.1755 92.8921 26.1121C92.763 26.0465 92.599 26.0137 92.4001 26.0137H91.5623V30H90.7656V25.3789ZM93.4031 30L92.3176 27.9243L93.1523 27.9211L94.2537 29.9587V30H93.4031ZM96.6594 25.9946L95.2788 30H94.4441L96.1833 25.3789H96.7166L96.6594 25.9946ZM97.8147 30L96.4309 25.9946L96.3706 25.3789H96.907L98.6526 30H97.8147ZM97.748 28.2861V28.9177H95.2344V28.2861H97.748ZM102.588 25.9946L101.208 30H100.373L102.112 25.3789H102.645L102.588 25.9946ZM103.743 30L102.36 25.9946L102.299 25.3789H102.836L104.581 30H103.743ZM103.677 28.2861V28.9177H101.163V28.2861H103.677ZM106.832 27.9116H105.654L105.648 27.3308H106.676C106.85 27.3308 106.997 27.3054 107.117 27.2546C107.24 27.2017 107.333 27.1266 107.396 27.0293C107.46 26.9299 107.492 26.8103 107.492 26.6707C107.492 26.5162 107.462 26.3903 107.403 26.293C107.344 26.1956 107.253 26.1248 107.13 26.0803C107.009 26.0359 106.855 26.0137 106.667 26.0137H105.895V30H105.099V25.3789H106.667C106.92 25.3789 107.147 25.4032 107.346 25.4519C107.547 25.5006 107.717 25.5767 107.857 25.6804C107.998 25.782 108.105 25.9111 108.177 26.0676C108.251 26.2242 108.288 26.4104 108.288 26.6262C108.288 26.8167 108.243 26.9912 108.152 27.1499C108.061 27.3065 107.927 27.4345 107.749 27.5339C107.571 27.6334 107.35 27.6926 107.085 27.7117L106.832 27.9116ZM106.797 30H105.403L105.762 29.3684H106.797C106.976 29.3684 107.127 29.3388 107.247 29.2795C107.368 29.2182 107.458 29.1346 107.517 29.0288C107.578 28.9209 107.609 28.795 107.609 28.6511C107.609 28.5009 107.583 28.3708 107.53 28.2607C107.477 28.1486 107.393 28.0629 107.279 28.0037C107.165 27.9423 107.016 27.9116 106.832 27.9116H105.937L105.943 27.3308H107.108L107.289 27.5498C107.542 27.5583 107.751 27.6143 107.914 27.718C108.079 27.8217 108.202 27.9561 108.282 28.1211C108.362 28.2861 108.403 28.4639 108.403 28.6543C108.403 28.9484 108.338 29.1949 108.209 29.3938C108.082 29.5927 107.899 29.744 107.66 29.8477C107.421 29.9492 107.133 30 106.797 30ZM109.206 25.3789H110.84C111.191 25.3789 111.491 25.4318 111.738 25.5376C111.986 25.6434 112.175 25.8 112.306 26.0073C112.44 26.2126 112.506 26.4665 112.506 26.769C112.506 26.9997 112.464 27.2028 112.379 27.3784C112.295 27.554 112.175 27.7021 112.021 27.8228C111.866 27.9412 111.682 28.0333 111.469 28.0989L111.227 28.2163H109.758L109.751 27.5847H110.853C111.043 27.5847 111.202 27.5509 111.329 27.4832C111.456 27.4154 111.551 27.3234 111.615 27.207C111.68 27.0885 111.713 26.9552 111.713 26.8071C111.713 26.6463 111.681 26.5067 111.618 26.3882C111.556 26.2676 111.461 26.1755 111.332 26.1121C111.203 26.0465 111.039 26.0137 110.84 26.0137H110.002V30H109.206V25.3789ZM111.843 30L110.758 27.9243L111.592 27.9211L112.694 29.9587V30H111.843ZM114.15 25.3789V30H113.354V25.3789H114.15ZM115.141 25.3789H116.775C117.126 25.3789 117.426 25.4318 117.673 25.5376C117.921 25.6434 118.11 25.8 118.241 26.0073C118.375 26.2126 118.441 26.4665 118.441 26.769C118.441 26.9997 118.399 27.2028 118.314 27.3784C118.23 27.554 118.11 27.7021 117.956 27.8228C117.801 27.9412 117.617 28.0333 117.404 28.0989L117.162 28.2163H115.693L115.687 27.5847H116.788C116.978 27.5847 117.137 27.5509 117.264 27.4832C117.391 27.4154 117.486 27.3234 117.55 27.207C117.615 27.0885 117.648 26.9552 117.648 26.8071C117.648 26.6463 117.616 26.5067 117.553 26.3882C117.491 26.2676 117.396 26.1755 117.267 26.1121C117.138 26.0465 116.974 26.0137 116.775 26.0137H115.937V30H115.141V25.3789ZM117.778 30L116.693 27.9243L117.527 27.9211L118.629 29.9587V30H117.778ZM122.653 25.9946L121.272 30H120.438L122.177 25.3789H122.71L122.653 25.9946ZM123.808 30L122.425 25.9946L122.364 25.3789H122.901L124.646 30H123.808ZM123.742 28.2861V28.9177H121.228V28.2861H123.742ZM129.512 28.4956H130.305C130.28 28.7982 130.195 29.068 130.051 29.3049C129.907 29.5398 129.705 29.7249 129.445 29.8604C129.185 29.9958 128.868 30.0635 128.496 30.0635C128.21 30.0635 127.953 30.0127 127.725 29.9111C127.496 29.8075 127.301 29.6615 127.138 29.4731C126.975 29.2827 126.85 29.0531 126.763 28.7844C126.679 28.5157 126.636 28.2153 126.636 27.8831V27.499C126.636 27.1668 126.68 26.8664 126.766 26.5977C126.855 26.3289 126.982 26.0994 127.147 25.9089C127.312 25.7164 127.51 25.5693 127.741 25.4678C127.973 25.3662 128.235 25.3154 128.525 25.3154C128.893 25.3154 129.204 25.3831 129.458 25.5186C129.712 25.654 129.908 25.8412 130.048 26.0803C130.19 26.3194 130.277 26.5934 130.308 26.9023H129.515C129.494 26.7035 129.447 26.5331 129.375 26.3914C129.305 26.2496 129.202 26.1417 129.064 26.0676C128.927 25.9915 128.747 25.9534 128.525 25.9534C128.343 25.9534 128.184 25.9872 128.049 26.0549C127.913 26.1226 127.8 26.2221 127.709 26.3533C127.618 26.4845 127.549 26.6463 127.503 26.8389C127.458 27.0293 127.436 27.2472 127.436 27.4927V27.8831C127.436 28.1158 127.456 28.3274 127.496 28.5178C127.539 28.7061 127.602 28.868 127.687 29.0034C127.774 29.1388 127.884 29.2436 128.017 29.3176C128.15 29.3917 128.31 29.4287 128.496 29.4287C128.722 29.4287 128.906 29.3927 129.045 29.3208C129.187 29.2489 129.294 29.1441 129.366 29.0066C129.44 28.8669 129.488 28.6966 129.512 28.4956ZM132.828 25.9946L131.448 30H130.613L132.352 25.3789H132.885L132.828 25.9946ZM133.984 30L132.6 25.9946L132.54 25.3789H133.076L134.822 30H133.984ZM133.917 28.2861V28.9177H131.403V28.2861H133.917ZM136.189 25.3789V30H135.393V25.3789H136.189ZM137.843 25.3789L138.824 27.0642L139.804 25.3789H140.722L139.325 27.6672L140.757 30H139.83L138.824 28.283L137.818 30H136.888L138.322 27.6672L136.923 25.3789H137.843ZM143.143 25.9946L141.763 30H140.928L142.667 25.3789H143.2L143.143 25.9946ZM144.299 30L142.915 25.9946L142.854 25.3789H143.391L145.136 30H144.299ZM144.232 28.2861V28.9177H141.718V28.2861H144.232Z" fill="#727172"/>
    <rect x="1" y="7" width="1.3" height="28" fill="#6d28d9"/>
    </svg>]]),
};

tickCount = {}

function render()
    parentY = interpolateBetween(position[1], 0, 0, position[2], 0, 0, ((getTickCount() - tickCount) / 400), "InOutBack")
    dxDrawImage(605, parentY, 156, 43, svg.background, 0, 0, 0, tocolor(255, 255, 255, 255), false);
end
lootBox = false

open = function(state, box)
    if state == true then
        if visible then
            return
        end
        addEventHandler ('onClientRender', getRootElement (), render, true, 'normal')
        tickCount =  getTickCount()
        lootBox = box
        position = {(screen[2] + 500), 696};
        visible = true;
    else
        if not visible then
            return
        end
        position = {696, (screen[2] + 500)};
        tickCount =  getTickCount()
        lootBox = false
        setTimer (function ()
            visible = false;
            removeEventHandler ('onClientRender', getRootElement (), render)
        end, 400, 1)
    end
end
addEvent ("announcement", true)
addEventHandler ("announcement", localPlayer, open)

addEventHandler("onClientKey", root, 
function(button, state)
    if (lootBox) then
        if (button == 'e' and state) then
            local dimension = getElementDimension(localPlayer)
            local playerX, playerY, playerZ = getElementPosition(localPlayer)
            removeEventHandler ('onClientRender', getRootElement (), render)
            if isElement(lootBox) then
                local boxX, boxY, boxZ = getElementPosition(lootBox)
                local distance = getDistanceBetweenPoints3D(playerX, playerY, playerZ, boxX, boxY, boxZ)
                if distance < 4.0 and getElementDimension(lootBox) == dimension then
                    triggerServerEvent('onPlayerTryToOpenBox', localPlayer, localPlayer, getElementData(lootBox, 'ID'), getElementModel(lootBox), boxX, boxY, boxZ);
                end 
            end
        elseif (button == 'e' and not state) then
            triggerEvent("progressBar", localPlayer, 0)
            triggerServerEvent('cancelLootBox', localPlayer, localPlayer);
        end
    end
end);

local objectsIDs = {}
local objects = {}
local markers = {}

addEvent('onClientCreateLootBox', true)
addEventHandler('onClientCreateLootBox', root, function(selectedSpawns)
    for colShape, marker in pairs(markers) do
        if isElement(marker) then
            destroyElement(marker)
        end
    end
    markers = {}
    for i, v in ipairs(objects) do
        if isElement(v[1]) then
            destroyElement(v[1])
        end
        if isElement(v[2]) then
            destroyElement(v[2])
        end
    end
    
    objects = {}
    objectsIDs = {}
    local dimension = getElementDimension(localPlayer)
    for index, spawn in ipairs(selectedSpawns) do
        local id = index
        local object = createObject(spawn.model, spawn.x, spawn.y, spawn.z - 0.8)
        setObjectScale(object, 1.5)
        setElementDimension(object, dimension)
        setElementCollisionsEnabled(object, false)
        
        local colshape = createColSphere(spawn.x, spawn.y, spawn.z, 3)
        setElementDimension(colshape, dimension)
        
        setElementData(object, 'ID', id)
        setElementData(colshape, 'ID', id)
        setElementData(colshape, 'lootBox', object)
        
        table.insert(objects, {object, colshape})
        
        objectsIDs[id] = {object, colshape}
        
        local r, g, b = 255, 255, 255
        if spawn.model == 1580 then
            r, g, b = 255, 255, 0 -- Amarelo
        elseif spawn.model == 1579 then
            r, g, b = 255, 0, 0 -- Vermelho
        elseif spawn.model == 1577 then
            r, g, b = 0, 255, 0 -- Verde
        elseif spawn.model == 1576 then
            r, g, b = 0, 0, 255 -- Azul
        end
        
        --local lightRadius = 2 * getElementRadius(object)
        --local marker = createMarker(spawn.x + 0.4, spawn.y + 0.27, spawn.z - 0.7, "corona", 1.5, r, g, b, 100)
        -- markers[colshape] = createLight(2, spawn.x + 0.4, spawn.y + 0.27, spawn.z + 0.7, lightRadius, r, g, b)
        --markers[colshape] = createSearchLight(spawn.x + 0.4, spawn.y + 0.27, spawn.z-1.68, spawn.x + 0.4, spawn.y + 0.27, spawn.z-1.69, 1.3, 1.3, true)
        --setLightColor(markers[colshape], r, g, b)
        --setElementDimension(markers[colshape], dimension)
    end
end)

addEvent("removeMarkerForItem", true)
addEventHandler("removeMarkerForItem", root, function(id)
    local objectData = objectsIDs[id]
    if objectData then
        local colShape = objectData[2]
        if isElement(markers[colShape]) then
            destroyElement(markers[colShape])
            markers[colShape] = nil
        end
    end
end)

setTimer(function()
    for _, marker in ipairs(getElementsByType("marker", resourceRoot)) do
        if getElementDimension(localPlayer) == getElementDimension(marker) then
            if getElementData(marker, "safezoneMarker") then
                local tamanhoGas = getMarkerSize(marker)
                for i, v in ipairs(objects) do 
                    if (isElement(v[1]) and isElement(v[2])) then 
                        local x, y, z = getElementPosition(marker)
                        local radius = tamanhoGas / 2
                        
                        if (not isPlayerInCircle(v[1], x, y, radius)) then
                            if (isElement(v[1])) then
                                setTimer(function()
                                    if (isElement(v[1])) then 
                                        destroyElement(v[1])
                                        triggerEvent("removeMarkerForItem", resourceRoot, i)
                                    end 
                                    if (isElement(v[2])) then 
                                        destroyElement(v[2])
                                        triggerEvent("removeMarkerForItem", resourceRoot, i)
                                    end 
                                end, 20000, 1)
                            end 
                        end
                    end
                end 
                break 
            end
        end
    end
end, 2 * 1000, 0)

function isPlayerInCircle(object, x, y, radius)
    local px, py = getElementPosition(object);
    if ((x-px)^2+(y-py)^2 <= radius^2) then return true; end
    return false;
end

addEvent("destroyLootDimension", true)
addEventHandler("destroyLootDimension", root, function(dim)
    for i, v in ipairs(objects) do 
        if isElement(v[1]) and isElement(v[2]) then 
            local dimObject = getElementDimension(v[1])
            if dimObject == dim then
                if isElement(v[1]) then 
                    destroyElement(v[1])
                    triggerEvent("removeMarkerForItem", resourceRoot, i)
                end 
            end
            local dimMarker = getElementDimension(v[2])         
            if dimMarker == dim then 
                if isElement(markers[v[2]]) then 
                    destroyElement(markers[v[2]])
                end
                if isElement(v[2]) then 
                    destroyElement(v[2])
                    triggerEvent("removeMarkerForItem", resourceRoot, i)
                end 
            end
        end
    end
end)

addEvent('onClientRemoveObjectID', true)
addEventHandler('onClientRemoveObjectID', root, function(id)
    if (objectsIDs[id]) then 
        if (isElement(objectsIDs[id][1])) then 
            destroyElement(objectsIDs[id][1])
        end 
        if (isElement(objectsIDs[id][2])) then 
            destroyElement(objectsIDs[id][2])
        end 
    end 
end)

addEventHandler('onClientColShapeHit', root, function(player, dimension)
    if (player ~= localPlayer) then 
        return 
    end
    if (dimension) then 
        if (getElementData(source, 'lootBox')) then 
            if (isElement(player) and getElementType(player) == 'player' and not isPedInVehicle(player)) then 
                open(true, getElementData(source, 'lootBox'))
            end 
        end
    end 
end)

addEventHandler('onClientColShapeLeave', root, function(player, dimension)
    if (player ~= localPlayer) then 
        return 
    end
    if (dimension) then 
        if (getElementData(source, 'lootBox')) then 
            if (isElement(player) and getElementType(player) == 'player') then 
                open(false)
            end 
        end
    end 
end)

local customBlockName = "animLoot"

setTimer(function()
    local IFP = engineLoadIFP("assets/sdahdwahdwhasd.ifp", customBlockName)
    if not IFP then
        print("Falha ao carregar a animação!")
    else
        print("Animação carregada com sucesso!")
        local replaced = engineReplaceAnimation(localPlayer, "BOMBER", "BOM_Plant", customBlockName, "LOOT")
        if replaced then
            print("Animação substituída com sucesso!")
        else
            print("Falha ao substituir a animação.")
        end
    end
end, 1000, 1)

addEvent("fn:animLoot > server", true)
addEventHandler("fn:animLoot > server", root, function(player)
    setPedAnimation(player, customBlockName, "LOOT", -1, false, false, false, false)
end)